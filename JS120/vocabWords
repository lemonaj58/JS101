Methods: when object properties have function values

collaborator objects/ collaborators: are objects that help provide state within another object.

object factories: functions that creat and return objects of a particular type.

MEMBER ACCESS NOTATION: dot notation for objects member access notation requires
valid variable names


computer member access notation: bracket notation for objects member access notation
can be computed on the fly, any expressiong between the brackets gets
evaluated as a string and used to reference the property

prototypal inheritance: the object that you inherit properties and methods from is called prototype
the function object.create creats a new object that inherits properties from an existing object.
it takes an object that is called the prototype object as an arguement and returns a new object that inheritsproperties
from the prototype object, the newly created object has access to all the properties and methods that the prototype object provides

hoisting: the engine effectivly moves function declarations to the top of the program file,
in which they are defined, or the top of the function in which they are nested. the result
is being able to initiate the function before it is declared.

anonymous functions. anonymous functions are commonplace in Js code these are functions
that dont take names for the functions, like function expressions 
prompt = function(word) {
  ...
};

higher Order functions: a higher order function is a function that has at least one of the following
it takes a function as an arguement, or it returns a function.

execution contect(context) is a concept that refers to the environment in which a function
executes in javascript. it most commonly refers to the current value of this keyword.

two bascic ways to set the context when calling function or method:
explicit: the execution context that you set explicitly.
implicit: the execution context that javascript sets implicitly when your code doesnt
provide an explicit context.

setting the execution context is also called binding this, or setting the bind. a binding is
something that ties two things together. in this case it refers to the fact that call
binds this to a specific object when the function or method is called

method execution context We learned earlier that when you call a method that belongs to an object,
 the execution context inside that method call is the object used to call the method

pseudo-classical: also known as constructor/prototype pattern, just another way to do class or cunstructors
we use constructor function and prototype object to create objects and provide common methods for those objects